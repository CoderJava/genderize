// Mocks generated by Mockito 5.2.0 from annotations
// in genderize/test/features/genderize/presentation/bloc/genderize_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i6;
import 'package:dartz/dartz.dart' as _i7;
import 'package:genderize/core/error/failures.dart' as _i8;
import 'package:genderize/features/genderize/domain/entities/genderize.dart'
    as _i9;
import 'package:genderize/features/genderize/domain/repositories/genderize_repository.dart'
    as _i5;
import 'package:genderize/features/genderize/domain/usecases/get_prediction.dart'
    as _i2;
import 'package:genderize/features/genderize/presentation/bloc/genderize_bloc.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetPrediction_0 extends _i1.Fake implements _i2.GetPrediction {}

class _FakeGenderizeState_1 extends _i1.Fake implements _i3.GenderizeState {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

class _FakeGenderizeRepository_3 extends _i1.Fake
    implements _i5.GenderizeRepository {}

/// A class which mocks [GenderizeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenderizeBloc extends _i1.Mock implements _i3.GenderizeBloc {
  MockGenderizeBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPrediction get getPrediction =>
      (super.noSuchMethod(Invocation.getter(#getPrediction),
          returnValue: _FakeGetPrediction_0()) as _i2.GetPrediction);
  @override
  _i3.GenderizeState get initialState =>
      (super.noSuchMethod(Invocation.getter(#initialState),
          returnValue: _FakeGenderizeState_1()) as _i3.GenderizeState);
  @override
  _i3.GenderizeState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeGenderizeState_1()) as _i3.GenderizeState);
  @override
  _i4.Stream<_i3.GenderizeState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.GenderizeState>.empty())
          as _i4.Stream<_i3.GenderizeState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.GenderizeEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.GenderizeEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>> transformEvents(
          _i4.Stream<_i3.GenderizeEvent>? events,
          _i6.TransitionFunction<_i3.GenderizeEvent, _i3.GenderizeState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>>.empty())
          as _i4
              .Stream<_i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>>);
  @override
  void emit(_i3.GenderizeState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.GenderizeEvent>(
          _i6.EventHandler<E, _i3.GenderizeState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i3.GenderizeState> mapEventToState(_i3.GenderizeEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i3.GenderizeState>.empty())
          as _i4.Stream<_i3.GenderizeState>);
  @override
  void onTransition(
          _i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>>
      transformTransitions(
              _i4.Stream<_i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>>?
                  transitions) =>
          (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue: Stream<
                  _i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>>.empty()) as _i4
              .Stream<_i6.Transition<_i3.GenderizeEvent, _i3.GenderizeState>>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.StreamSubscription<_i3.GenderizeState> listen(
          void Function(_i3.GenderizeState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<_i3.GenderizeState>())
          as _i4.StreamSubscription<_i3.GenderizeState>);
  @override
  void onChange(_i6.Change<_i3.GenderizeState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetPrediction].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPrediction extends _i1.Mock implements _i2.GetPrediction {
  MockGetPrediction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GenderizeRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeGenderizeRepository_3()) as _i5.GenderizeRepository);
  @override
  _i4.Future<_i7.Either<_i8.Failure, _i9.Genderize>?> call(
          _i2.GenderizeParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i7.Either<_i8.Failure, _i9.Genderize>?>.value())
          as _i4.Future<_i7.Either<_i8.Failure, _i9.Genderize>?>);
}
